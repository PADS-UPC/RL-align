import org.jbpt.bp.BehaviouralProfile;
import org.jbpt.bp.construct.BPCreatorUnfolding;
import org.jbpt.petri.NetSystem;
import org.jbpt.petri.Node;
import org.jbpt.petri.Place;
import org.jbpt.petri.Transition;

import java.util.HashMap;
import java.util.Scanner;

public class ComputeBP {

    /// load PN from stdin (in plain text format generated by 'dump')

    private static NetSystem loadPetriNet() {
	NetSystem net = new NetSystem();
	HashMap<String, Place> places = new HashMap<String, Place>();
	HashMap<String, Transition> transitions = new HashMap<String, Transition>();
        
	Scanner input = new Scanner(System.in);
        while (input.hasNext()) {
            String line = input.nextLine();
	    String[] fields = line.split(" ");
	    if (fields[0].equals("PLACE")) {
		Place p = new Place();
                p.setId(fields[1]);
                p.setName(fields[2]);
		net.addNode(p);
		if (fields[3].equals("INITIAL")) net.getMarking().put(p,1);
		places.put(fields[1],p);
	    }
	    else if (fields[0].equals("TRANSITION")) {
		Transition t = new Transition();
                t.setId(fields[1]);
                t.setName(fields[2]);
		net.addNode(t);
		transitions.put(fields[1],t);
	    }
	    else if (fields[0].equals("ARC")) {
		if (places.containsKey(fields[1]) && transitions.containsKey(fields[2]))
		    net.addFlow(places.get(fields[1]), transitions.get(fields[2]));
		else if (transitions.containsKey(fields[1]) && places.containsKey(fields[2]))
		    net.addFlow(transitions.get(fields[1]), places.get(fields[2]));
	    }
        }        
        return net;
    }

    /// -- MAIN -- 

    public static void main(String[] args){
	
	NetSystem net = loadPetriNet();	
	BehaviouralProfile<NetSystem, Node> bp = BPCreatorUnfolding.getInstance().deriveRelationSet(net);
	
	for (Node n : bp.getEntities()) {
	    for (Node m : bp.getEntities()) {
		if (n.getId().compareTo(m.getId())<=0)
		    System.out.println(n.getId()+" "+m.getId()+" "+bp.getSymbolForRelation(bp.getRelationForEntities(n,m)));
	    }
	}
    }

}
